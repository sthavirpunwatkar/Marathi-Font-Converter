// Simple test for Marathi converter
// Run with: node test-converter.js

// Mock the converter functions for testing
const fontMappings = {
  'unicode': {
    name: 'unicode',
    displayName: 'Unicode',
    mapping: {
      unicode_to_font: {},
      font_to_unicode: {}
    }
  },
  'aps-dv-prakash': {
    name: 'aps-dv-prakash',
    displayName: 'APS DV Prakash',
    mapping: {
      unicode_to_font: {
        'рдЕ': 'v',
        'рдЖ': 'vk',
        'рдЗ': 'b',
        'рдИ': 'bZ',
        'рдЙ': 'm',
        'рдК': 'm~',
        'рдЛ': '`',
        'рдП': ',s',
        'рдР': ',l',
        'рдУ': 'vks',
        'рдФ': 'vkS',
        'рдХ': 'd',
        'рдЦ': 'd[k',
        'рдЧ': 'x',
        'рдШ': '?k',
        'рдЩ': '┬│',
        'рдЪ': 'p',
        'рдЫ': 'N',
        'рдЬ': 't',
        'рдЭ': 'T',
        'рдЮ': 'u',
        'рдЯ': 'V',
        'рда': 'B',
        'рдб': 'M',
        'рдв': '<',
        'рдг': '.k',
        'рдд': 'r',
        'рде': 'Fk',
        'рдж': 'n',
        'рдз': '/k',
        'рди': 'u',
        'рдк': 'i',
        'рдл': 'Q',
        'рдм': 'c',
        'рдн': 'Hk',
        'рдо': 'e',
        'рдп': ';',
        'рд░': 'j',
        'рд▓': 'y',
        'рд╡': 'o',
        'рд╢': "'k",
        'рд╖': '"k',
        'рд╕': 'l',
        'рд╣': 'g',
        'рд╛': 'k',
        'рд┐': 'h',
        'реА': 'h',
        'реБ': 'q',
        'реВ': 'w',
        'реГ': '`',
        'реЗ': 's',
        'реИ': 'S',
        'реЛ': 'ks',
        'реМ': 'kS',
        'реН': '~',
        'рдВ': 'a',
        'рдГ': '%',
        'ред': 'A',
        'рее': 'AA',
        'рд╜': 'd_',
        'реР': 'vke~',
        'реж': '0',
        'рез': '1',
        'реи': '2',
        'рей': '3',
        'рек': '4',
        'рел': '5',
        'рем': '6',
        'рен': '7',
        'рео': '8',
        'реп': '9'
      },
      font_to_unicode: {
        'v': 'рдЕ',
        'vk': 'рдЖ',
        'b': 'рдЗ',
        'bZ': 'рдИ',
        'm': 'рдЙ',
        'm~': 'рдК',
        '`': 'рдЛ',
        ',s': 'рдП',
        ',l': 'рдР',
        'vks': 'рдУ',
        'vkS': 'рдФ',
        'd': 'рдХ',
        'd[k': 'рдЦ',
        'x': 'рдЧ',
        '?k': 'рдШ',
        '┬│': 'рдЩ',
        'p': 'рдЪ',
        'N': 'рдЫ',
        't': 'рдЬ',
        'T': 'рдЭ',
        'u': 'рдЮ',
        'V': 'рдЯ',
        'B': 'рда',
        'M': 'рдб',
        '<': 'рдв',
        '.k': 'рдг',
        'r': 'рдд',
        'Fk': 'рде',
        'n': 'рдж',
        '/k': 'рдз',
        'i': 'рдк',
        'Q': 'рдл',
        'c': 'рдм',
        'Hk': 'рдн',
        'e': 'рдо',
        ';': 'рдп',
        'j': 'рд░',
        'y': 'рд▓',
        'o': 'рд╡',
        "'k": 'рд╢',
        '"k': 'рд╖',
        'l': 'рд╕',
        'g': 'рд╣',
        'k': 'рд╛',
        'h': 'рд┐',
        'q': 'реБ',
        'w': 'реВ',
        's': 'реЗ',
        'S': 'реИ',
        'ks': 'реЛ',
        'kS': 'реМ',
        '~': 'реН',
        'a': 'рдВ',
        '%': 'рдГ',
        'A': 'ред',
        'AA': 'рее',
        'd_': 'рд╜',
        'vke~': 'реР',
        '0': 'реж',
        '1': 'рез',
        '2': 'реи',
        '3': 'рей',
        '4': 'рек',
        '5': 'рел',
        '6': 'рем',
        '7': 'рен',
        '8': 'рео',
        '9': 'реп'
      }
    }
  }
};

function convertMarathiText(inputText, sourceFont, targetFont) {
  if (sourceFont === 'unicode' && targetFont !== 'unicode') {
    return convertUnicodeToFont(inputText, targetFont);
  } else if (sourceFont !== 'unicode' && targetFont === 'unicode') {
    return convertFontToUnicode(inputText, sourceFont);
  } else if (sourceFont !== 'unicode' && targetFont !== 'unicode') {
    const unicodeText = convertFontToUnicode(inputText, sourceFont);
    return convertUnicodeToFont(unicodeText, targetFont);
  } else {
    return inputText;
  }
}

function convertUnicodeToFont(text, targetFont) {
  const fontInfo = fontMappings[targetFont];
  if (!fontInfo) {
    console.error(`Font mapping not found for: ${targetFont}`);
    return text;
  }
  
  const mapping = fontInfo.mapping.unicode_to_font;
  let result = '';
  let i = 0;
  
  while (i < text.length) {
    let matched = false;
    
    // Try to match multi-character sequences first (longest match)
    for (let len = Math.min(4, text.length - i); len > 0; len--) {
      const char = text.substr(i, len);
      if (mapping[char]) {
        result += mapping[char];
        i += len;
        matched = true;
        break;
      }
    }
    
    // If no match found, keep original character
    if (!matched) {
      result += text[i];
      i++;
    }
  }
  
  return result;
}

function convertFontToUnicode(text, sourceFont) {
  const fontInfo = fontMappings[sourceFont];
  if (!fontInfo) {
    console.error(`Font mapping not found for: ${sourceFont}`);
    return text;
  }
  
  const mapping = fontInfo.mapping.font_to_unicode;
  let result = '';
  let i = 0;
  
  while (i < text.length) {
    let matched = false;
    
    // Try to match multi-character sequences first (longest match)
    for (let len = Math.min(4, text.length - i); len > 0; len--) {
      const char = text.substr(i, len);
      if (mapping[char]) {
        result += mapping[char];
        i += len;
        matched = true;
        break;
      }
    }
    
    // If no match found, keep original character
    if (!matched) {
      result += text[i];
      i++;
    }
  }
  
  return result;
}

// Test cases
const testCases = [
  {
    name: "Simple Unicode to APS",
    input: "рдирдорд╕реНрдХрд╛рд░",
    sourceFont: "unicode",
    targetFont: "aps-dv-prakash",
    expected: "ueLdkj"
  },
  {
    name: "Simple APS to Unicode",
    input: "ueLdkj",
    sourceFont: "aps-dv-prakash",
    targetFont: "unicode",
    expected: "рдирдорд╕реНрдХрд╛рд░"
  },
  {
    name: "Complex Unicode to APS",
    input: "рдорд░рд╛рдареА рднрд╛рд╖рд╛",
    sourceFont: "unicode",
    targetFont: "aps-dv-prakash",
    expected: "ejkBh f'kk"
  },
  {
    name: "Numbers Unicode to APS",
    input: "резреирейрекрел",
    sourceFont: "unicode",
    targetFont: "aps-dv-prakash",
    expected: "12345"
  }
];

console.log("ЁЯзк Testing Marathi Font Converter\n");

let passedTests = 0;
let totalTests = testCases.length;

testCases.forEach((testCase, index) => {
  console.log(`Test ${index + 1}: ${testCase.name}`);
  console.log(`Input: "${testCase.input}" (${testCase.sourceFont} тЖТ ${testCase.targetFont})`);
  
  const result = convertMarathiText(testCase.input, testCase.sourceFont, testCase.targetFont);
  
  console.log(`Expected: "${testCase.expected}"`);
  console.log(`Result:   "${result}"`);
  
  if (result === testCase.expected) {
    console.log("тЬЕ PASSED\n");
    passedTests++;
  } else {
    console.log("тЭМ FAILED\n");
  }
});

console.log(`\nЁЯУК Test Results: ${passedTests}/${totalTests} tests passed`);

if (passedTests === totalTests) {
  console.log("ЁЯОЙ All tests passed! The converter is working correctly.");
} else {
  console.log("тЪая╕П  Some tests failed. Please check the implementation.");
}

// Additional round-trip test
console.log("\nЁЯФД Round-trip Test:");
const roundTripText = "рдирдорд╕реНрдХрд╛рд░ рдорд░рд╛рдареА рднрд╛рд╖рд╛";
const toAps = convertMarathiText(roundTripText, "unicode", "aps-dv-prakash");
const backToUnicode = convertMarathiText(toAps, "aps-dv-prakash", "unicode");

console.log(`Original: "${roundTripText}"`);
console.log(`To APS:   "${toAps}"`);
console.log(`Back:     "${backToUnicode}"`);
console.log(`Round-trip successful: ${roundTripText === backToUnicode ? "тЬЕ" : "тЭМ"}`); 